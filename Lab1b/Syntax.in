program = "#" block "#"
block = statement ";"

statement = compoundStatement |  declarationStatement | assignmentStatement | ioStatement | ifStatement | loopStatement
compoundStatement = statement ";" statement

declarationStatement = "let" declaration
declaration = type declaree {"," declaree} | declaration "," declaration
declaree = identifier | declaree "[" integer "]" | declaree "=" expression
type = ("int" | "bool" | "string")

assignmentStatement = address "=" expression
address = identifier | address "[" expression "]"

expression = listExpression | expression ("+" | "-" | "or") term | term
listExpression = "{" "}" | "{" expression {"," expression} "}"
term = term ("*" | "/" | "%" | "and") factor | factor
factor = "(" expression ")"  | relational | address | constant
relational = expression comparator expression
comparator = "<" | "<=" | "==" | ">=" | ">"
constant = integer | boolean | string

ioStatement = readStatement | writeStatement
readStatement = "read" "(" address ")"
writeStatement = "write" "(" expression ")"

ifStatement = "if" "(" expression ")" "then" "{" block "}" ["else" "{" block "}"]

loopStatement = whileStatement | forStatement
forStatement = "for" "(" (declarationStatement | assignmentStatement) ";" expression ";" assignmentStatement ")" "do" "{" block "}"
whileStatement = "while" "(" expression ")" "do" "{" block "}"

integer = "0" | ["+" | "-"] nonzero {digit}
boolean = "true" | "false"
string = """ {character} """

identifier = (letter | "_") {character} 
character = letter | digit | "_"
letter = "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
digit = "0" | nonzero
nonzero = "1" | "2" | ... | "9"
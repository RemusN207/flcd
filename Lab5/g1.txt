terminal
a, *, +, (, )
nonTerminal
S, A, B, C, D
production
S -> B A
A -> + B A | eps
B -> D C
C -> * D C | eps
D -> ( S ) | a

{let=let=pop, #=#=pop, subscription=>==([eps], 39), >=>=pop, ;=;=pop, for=for=pop, while=while=pop, constant=constant=pop, read=read=pop, then=then=pop, !==!==pop, identifier=identifier=pop, or=or=pop, (=(=pop, [=[=pop, ]=]=pop, int=int=pop, -=-=pop, /=/=pop, <==<==pop, not=not=pop, *=*=pop, if=if=pop, do=do=pop, )=)=pop, $=$=acc, +=+=pop, else=else=pop, %=%=pop, bool=bool=pop, ======pop, string=string=pop, ====pop, >==>==pop, }=}=pop, {={=pop, and=and=pop, <=<=pop, write=write=pop, factor=(=([(, expression, )], 20), subscription=>=([eps], 39), secondTerm=<=([eps], 33), secondTerm=!==([eps], 33), secondExpression=or=([or, term, secondExpression], 50), type=bool=([bool], 2), loopStatement=while=([whileStatement], 16), statement=for=([loopStatement, ;], 9), term=not=([factor, secondTerm], 46), secondExpression=)=([eps], 51), program=#=([#, compoundStatement, #], 24), expression=not=([term, secondExpression], 54), secondTerm====([eps], 33), declaree=identifier=([identifier, arraySizeDeclaration], 14), expression=(=([term, secondExpression], 54), optionalStatement=#=([eps], 11), term=(=([factor, secondTerm], 46), subscription=[=([[, expression, ]], 38), secondTerm=+=([eps], 33), subscription=$=([eps], 39), subscription=and=([eps], 39), secondTerm=]=([eps], 33), declaration=bool=([type, declaree], 47), factor=not=([not, factor], 19), subscription===([eps], 39), declaration=string=([type, declaree], 47), secondTerm=%=([%, factor, secondTerm], 31), subscription=or=([eps], 39), term=identifier=([factor, secondTerm], 46), secondTerm=<==([eps], 33), comparator=>=([>], 45), optionalStatement=for=([compoundStatement], 10), comparator=>==([>=], 44), secondExpression=>=([eps], 51), secondExpression=>==([eps], 51), secondTerm=;=([eps], 33), expression=identifier=([term, secondExpression], 54), factor=[=([relational], 21), type=int=([int], 1), subscription=)=([eps], 39), secondTerm=-=([eps], 33), readStatement=read=([read, (, address, )], 27), subscription=/=([eps], 39), secondTerm=*=([*, factor, secondTerm], 29), factor=identifier=([address], 22), declaration=int=([type, declaree], 47), elseBlock=else=([else, {, compoundStatement, }], 12), term=[=([factor, secondTerm], 46), elseBlock=;=([eps], 13), type=string=([string], 3), compoundStatement=for=([statement, optionalStatement], 25), expression=[=([term, secondExpression], 54), arraySizeDeclaration=[=([[, constant, ]], 52), term=-=([factor, secondTerm], 46), optionalStatement=while=([compoundStatement], 10), subscription====([eps], 39), writeStatement=write=([write, (, expression, )], 55), address=identifier=([identifier, subscription], 56), expression=-=([term, secondExpression], 54), secondExpression=-=([-, term, secondExpression], 49), factor=constant=([constant], 23), subscription=!==([eps], 39), optionalStatement=}=([eps], 11), compoundStatement=identifier=([statement, optionalStatement], 25), assignmentStatement=identifier=([address, =, expression], 26), optionalStatement=let=([compoundStatement], 10), secondExpression=<==([eps], 51), ioStatement=write=([writeStatement], 36), secondExpression=;=([eps], 51), secondTerm=>==([eps], 33), arraySizeDeclaration=;=([eps], 53), secondTerm=>=([eps], 33), comparator=<==([<=], 41), compoundStatement=read=([statement, optionalStatement], 25), subscription=<=([eps], 39), secondTerm=$=([eps], 33), subscription=+=([eps], 39), subscription=]=([eps], 39), secondTerm=and=([and, factor, secondTerm], 32), compoundStatement=let=([statement, optionalStatement], 25), whileStatement=while=([while, (, expression, ), do, {, compoundStatement, }], 37), optionalStatement=identifier=([compoundStatement], 10), factor=-=([-, factor], 18), relational=[=([[, expression, comparator, expression, ]], 34), statement=if=([ifStatement, ;], 8), optionalStatement=read=([compoundStatement], 10), statement=write=([ioStatement, ;], 7), ifStatement=if=([if, (, expression, ), then, {, compoundStatement, }, elseBlock], 15), expression=constant=([term, secondExpression], 54), compoundStatement=while=([statement, optionalStatement], 25), term=constant=([factor, secondTerm], 46), declarationStatement=let=([let, declaration], 4), comparator====([==], 42), statement=let=([declarationStatement, ;], 5), subscription=-=([eps], 39), secondTerm=)=([eps], 33), secondTerm=/=([/, factor, secondTerm], 30), compoundStatement=if=([statement, optionalStatement], 25), loopStatement=for=([forStatement], 17), secondExpression====([eps], 51), statement=while=([loopStatement, ;], 9), ioStatement=read=([readStatement], 35), subscription=;=([eps], 39), comparator=!==([!=], 43), compoundStatement=write=([statement, optionalStatement], 25), secondExpression=<=([eps], 51), comparator=<=([<], 40), secondTerm=or=([eps], 33), subscription=%=([eps], 39), secondExpression=!==([eps], 51), subscription=<==([eps], 39), optionalStatement=write=([compoundStatement], 10), secondExpression=]=([eps], 51), secondExpression=+=([+, term, secondExpression], 48), forStatement=for=([for, (, assignmentStatement, ;, expression, ;, assignmentStatement, ), do, {, compoundStatement, }], 28), statement=identifier=([assignmentStatement, ;], 6), subscription=*=([eps], 39), statement=read=([ioStatement, ;], 7), optionalStatement=if=([compoundStatement], 10)}
